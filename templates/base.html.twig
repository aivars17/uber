<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Welcome!{% endblock %}</title>
        {% block stylesheets %}
            <link rel="stylesheet" href="{{ asset('build/css/app.css') }}">
        {% endblock %}
        {#<script src="{{ asset('build/js/app.js') }}"></script>#}
    </head>
    <body>
        <div class="container">
            <div class="row">
                <img height="100%" width="100%" src="{{ asset('logo/taxi_logo.png') }}">
            </div>
        </div>

        {% block body %}
        {% endblock %}
        <div class="mastfoot">
            <div class="inner">
                <p>Cover template for <a href="https://getbootstrap.com">Bootstrap</a>, by <a href="https://twitter.com/mdo">@mdo</a>.</p>
            </div>
        </div>
        {% block javascripts %}
            <script>
                function initMap() {
                    var map = new google.maps.Map(document.getElementById('map'), {
                        mapTypeControl: false,
                        center: {lat: -33.8688, lng: 151.2195},
                        zoom: 13
                    });

                    new AutocompleteDirectionsHandler(map);
                }

                /**
                 * @constructor
                 */
                function AutocompleteDirectionsHandler(map) {
                    this.map = map;
                    this.originPlaceId = null;
                    this.destinationPlaceId = null;
                    this.travelMode = 'WALKING';
                    var originInput = document.getElementById('origin-input');
                    var destinationInput = document.getElementById('destination-input');
                    var modeSelector = 'changemode-driving';
                    this.directionsService = new google.maps.DirectionsService;
                    this.directionsDisplay = new google.maps.DirectionsRenderer;
                    this.directionsDisplay.setMap(map);

                    var originAutocomplete = new google.maps.places.Autocomplete(
                        originInput, {placeIdOnly: true});
                    var destinationAutocomplete = new google.maps.places.Autocomplete(
                        destinationInput, {placeIdOnly: true});

                    this.setupClickListener('changemode-walking', 'WALKING');
                    this.setupClickListener('changemode-transit', 'TRANSIT');
                    this.setupClickListener('changemode-driving', 'DRIVING');

                    this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
                    this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

                    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
                    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
                    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
                }

                // Sets a listener on a radio button to change the filter type on Places
                // Autocomplete.
                AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {
                    var radioButton = document.getElementById(id);
                    var me = this;
                    radioButton.addEventListener('click', function() {
                        me.travelMode = mode;
                        me.route();
                    });
                };

                AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
                    var me = this;
                    autocomplete.bindTo('bounds', this.map);
                    autocomplete.addListener('place_changed', function() {
                        var place = autocomplete.getPlace();
                        if (!place.place_id) {
                            window.alert("Please select an option from the dropdown list.");
                            return;
                        }
                        if (mode === 'ORIG') {
                            me.originPlaceId = place.place_id;
                        } else {
                            me.destinationPlaceId = place.place_id;
                        }
                        me.route();
                    });

                };

                AutocompleteDirectionsHandler.prototype.route = function() {
                    if (!this.originPlaceId || !this.destinationPlaceId) {
                        return;
                    }
                    var me = this;

                    this.directionsService.route({
                        origin: {'placeId': this.originPlaceId},
                        destination: {'placeId': this.destinationPlaceId},
                        travelMode: this.travelMode
                    }, function(response, status) {
                        if (status === 'OK') {
                            me.directionsDisplay.setDirections(response);
                        } else {
                            window.alert('Directions request failed due to ' + status);
                        }
                    });
                };
            </script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDLNJ7-yzXhpoZ8TayYgcs7ykUFE1xKTC8&libraries=places&callback=initMap"
                    async defer></script>
        {% endblock %}
    </body>
</html>
