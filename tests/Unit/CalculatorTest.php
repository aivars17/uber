<?php

namespace App\Tests\Unit;

use App\Controller\Calculator;
use PHPUnit\Framework\TestCase;

class CalculatorTest extends TestCase
{
    protected $calc;
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->calc = new Calculator();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->calc = null;
    }


    /**
     * @dataProvider additionDataProvider
     */
    public function testAddition($a,$b,$expected)
    {
        // prepare
        // perform
        $result = $this->calc->add($a,$b);
        //
        $this->assertEquals($expected, $result);
    }

    public function additionDataProvider()
    {
        return [
          [5,3,8],
          [8,12,20],
          [10,15,25],
          [-5,-6,-11],
            [5,1.5,6.5]
        ];
    }


    public function testAdditionFailsWithStrings()
    {
        try{
            $this->calc->add('hello', 'world');
            $this->assertTrue(false);
        }
        catch (\UnexpectedValueException $e){
            $this->assertTrue(true);
        }



    }

    public function testAdditionFailsWithObjects()
    {

        try{
            $this->calc->add($this->calc, $this->calc);
            $this->assertTrue(false);
        }
        catch (\UnexpectedValueException $e){
            $this->assertTrue(true);
        }


    }

    /**
     * @dataProvider additionFailDataProvider
     */
    public function testAdditionFailsWithBadInput($a, $b)
    {
        try{
            $this->calc->add($a,$b);
            $this->assertTrue(false);
        }
        catch (\UnexpectedValueException $e){
            $this->assertTrue(true);
        }
    }

    public function additionFailDataProvider()
    {
        return [
            ['hello', 'world'],
            [new Calculator(), new Calculator()],
            ['hello', new Calculator()]
        ];
    }

    /**
     * @dataProvider additionDataProviderSub
     */
    public function testSubstract($a, $b, $expected)
    {
        $result = $this->calc->subtract($a, $b);
        $this->assertEquals($expected,$result);
    }


    public function additionDataProviderSub()
    {
        return [
            [5,3,2],
            [8,12,-4],
            [10,15,-5],
            [-5,-6,1],
            [1,0.5,0.5]
        ];
    }

    /**
     * @dataProvider additionFailDataProvider
     */
    public function testSubstractFailsWithBadInput($a,$b)
    {
        try{
            $this->calc->subtract($a,$b);
            $this->assertTrue(false);
        }
        catch (\UnexpectedValueException $e){
            $this->assertTrue(true);
        }
    }
}
