<?php

namespace App\Tests\Unit;

use App\Entity\User;
use App\Repository\UserRepository;
use App\Service\UserService;
use PHPUnit\Framework\TestCase;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Console\Input\ArrayInput;

class UserServiceTest extends KernelTestCase
{
    /**
     * @var App/service/UserService
     */
    protected $userService;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $kernel  = self::createKernel();
        $application = new Application($kernel);
        $application->setAutoExit(false);
        $application->run(new ArrayInput([
            'command' => 'doctrine:database:drop',
            '--force' => true
        ]));
        $application->run(new ArrayInput([
            'command' => 'doctrine:database:create'
        ]));
        $application->run(new ArrayInput([
            'command' => 'doctrine:migrations:migrate',
            '--no-interaction' => true
        ]));
        $application->run(new ArrayInput([
            'command' => 'doctrine:fixtures:load',
            '--append' => true
        ]));

        $userRepository = $kernel->getContainer()->get('doctrine')->getRepository(User::class);
        $this->userService = new UserService($userRepository);
    }

    public function testSomething()
    {
        $result = $this->userService->getAmount();
        $this->assertEquals(9,$result);
    }









//    protected function setUp()
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//
//        $this->userRepository = $this->createMock(UserRepository::class);
//        $this->userService = new UserService($this->userRepository);
//    }
//
//    protected function tearDown()
//    {
//        parent::tearDown(); // TODO: Change the autogenerated stub
//
//        $this->userService = null;
//    }
//
//
//    public function testGetAmountWorksWithEmptyArray()
//    {
////        $this->userRepository->method('findAll')->willReturn(['2','a','e','g']);
//
//        $amount = $this->userService->getAmount();
//
//        $this->assertEquals(4,$amount);
//    }

//    public function testGetAmountWorksWith4Items()
//    {
//        $this->userRepository->method('findAll')->willReturn([
//            $this->createMock(UserRepository::class),
//            $this->createMock(UserRepository::class),
//            $this->createMock(UserRepository::class),
//            $this->createMock(UserRepository::class)
//        ]);
//
//        $amount = $this->userService->getAmount();
//
//        $this->assertEquals(4,$amount);
//    }
}
